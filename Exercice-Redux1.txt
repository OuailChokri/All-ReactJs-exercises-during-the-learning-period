//APP.JS
import { BrowserRouter, Routes, Route } from 'react-router-dom';
import './App.css';
import AddUser from './Composants/AddUser';
import UpdateUser from './Composants/UpdateUser';
import UserList from './Composants/UserList';
function App() {
  return (
    <div style={{paddingLeft:40}}>
      <h1>CRUD REACT-REDUX Example 1</h1>
      <BrowserRouter>
        <Routes>
          <Route path='/' element={<UserList />} />
          <Route path='/add-user' element={<AddUser />} />
          <Route path='/update-user/:id' element={<UpdateUser />} />
        </Routes>
      </BrowserRouter>
    </div>
  );
}
export default App;

/**
 Provider: Un composant React qui permet de fournir des données à tous ses composants enfants via le contexte, généralement utilisé pour la gestion de l'état global, comme dans Redux.

legacy_createStore: Une fonction utilisée dans Redux pour créer un magasin de données (store) qui gère l'état global de l'application.

useNavigate: Un hook de React Router qui permet de naviguer entre les différentes pages de l'application.

useDispatch: Un hook de React Redux qui permet de déclencher des actions pour mettre à jour l'état global de l'application.

useSelector: Un hook de React Redux qui permet de sélectionner des morceaux de l'état global de l'application pour être utilisés dans un composant.

useParams: Un hook de React Router qui permet d'extraire des paramètres de l'URL, généralement utilisé pour récupérer des valeurs dynamiques de l'URL.

BrowserRouter-Routes-Route-Link: Des composants fournis par React Router pour configurer la gestion des routes et de la navigation dans une application web.


 */

//index.js
import ReactDOM from 'react-dom/client';
import './index.css';
import App from './App';
import { Provider } from 'react-redux';
import { legacy_createStore } from 'redux';
import reducer from './Config/reducer';
const store = legacy_createStore(reducer)
console.log(reducer)
const root = ReactDOM.createRoot(document.getElementById('root'));
root.render(
  <Provider store={store}>
    {console.log(store.users)}
    <App />
  </Provider>
);


//action.js
export const addUserAction = (user) => {
    //console.log('Payload:', user);
    return {type:"Add_user", payload:user}
}
export const updateUserAction = (newuser) => {
    console.log('Payload:', newuser);
    return {type:"Update_user", payload:newuser}
}
export const deleteUserAction = (id) => {
    return {type:"Delete_user", payload:id}
}



//reducer.js
const initialState = {
    users:[ 
        { id: 1, name: "Mohamed Allaoui", email: "allaoui@gmail.com" }, 
        { id: 2, name: "Hind Benanni", email: "benani@gmail.com" }
    ] 
};
const reducer = (state=initialState, action) => {
    switch(action.type) {
        case "Add_user":
            //console.log(action.payload)
            return {...state, users:[...state.users, action.payload]}
        case "Update_user":
            const user = state.users.find((u)=>u.id===parseInt(action.payload.id))
            console.log(user)
            if (user) {
                user.name = action.payload.name
                user.email = action.payload.email
            }
            return state
        case "Delete_user":
            return {...state, users:[...state.users.filter((u)=>u.id!==parseInt(action.payload))]}
        default:
            return state
    }
}
export default reducer



/*
Utiliser le reducer : Lorsque vous dispatchez une action depuis un composant React à l'aide de dispatch, l'action est envoyée au store Redux. Le store envoie cette action au reducer approprié, en fonction du type d'action.
*/


//AddUser.js
import { useState } from "react"
import { useDispatch, useSelector } from "react-redux"
import { addUserAction } from "../Config/actions"
import { useNavigate } from "react-router-dom";
function AddUser() {
    const count = useSelector(data=>data.users.length);
    const [name, setName] = useState("");
    const [email, setEmail] = useState("");
    const dispatch = useDispatch();
    const navigate = useNavigate()
    const handleClick = () => {
        dispatch(addUserAction({
            id:count+1,
            name:name,
            email:email
        }))
        navigate('/')
    }
    return (
        <form>
            <label>Name</label>
            <input type="text" value={name} onChange={(e)=>setName(e.target.value)} />
            <label>Email</label>
            <input type="email" value={email} onChange={(e)=>setEmail(e.target.value)} />
            <button onClick={handleClick}>Enregistrer</button>
        </form>
    )
}
export default AddUser


//UpdateUser.js
import { useParams } from "react-router-dom"
import { useDispatch, useSelector } from "react-redux"
import { updateUserAction } from "../Config/actions"
import { useNavigate } from "react-router-dom";
import { useState } from "react"

function UpdateUser() {
    const {id} = useParams()
    
    const user = useSelector(data=>data.users.find((u)=>u.id===parseInt(id)));
    const [name, setName] = useState(user.name);
    const [email, setEmail] = useState(user.email);
    const dispatch = useDispatch();
    const navigate = useNavigate()
    const handleClick = () => {
        dispatch(updateUserAction({
            id:id,
            name:name,
            email:email
        }))
        navigate('/')
    }
    return (
        <form>
            <label>Name</label>
            <input type="text" value={name} onChange={(e)=>setName(e.target.value)} />
            <label>Email</label>
            <input type="email" value={email} onChange={(e)=>setEmail(e.target.value)} />
            <button onClick={handleClick}>Enregistrer</button>
        </form>
    )
}
export default UpdateUser


//UserListe.js
import { useSelector, useDispatch } from "react-redux"
import { Link } from "react-router-dom"
import {deleteUserAction} from '../Config/actions'
function UserList() {
    const users = useSelector((data)=>data.users);
    const dispatch = useDispatch();
    const handleDelete = (id) => {
        dispatch(deleteUserAction(id))
    }
    return (
        <div>
            <p>
                <Link to="/add-user">
                    <button>Add user</button>
                </Link>
            </p>
            <table>
                <thead>
                    <tr>
                        <td>ID</td>
                        <td>Name</td>
                        <td>Email</td>
                        <td>Action</td>
                    </tr>
                </thead>
                <tbody>
                    {users.map((user, index)=> {
                            return (
                            <tr key={index}>
                                <td>{user.id}</td>
                                <td>{user.name}</td>
                                <td>{user.email}</td>
                                <td>
                                    <Link to={`/update-user/${user.id}`}>
                                        <button>Edit</button>
                                    </Link>
                                    <button onClick={() => handleDelete(user.id)}>Delete</button>
                                </td>
                            </tr>
                            )
                        }) }
                        
                </tbody>
            </table>
        </div>
    )
}
export default UserList